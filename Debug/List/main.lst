###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.11.1.50453 for Atmel AVR        18/Jan/2024  20:33:09 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\1307A\soc-p\proiect\main.c                            #
#    Command line =  D:\1307A\soc-p\proiect\main.c --cpu=m16 -ms -o           #
#                    D:\1307A\soc-p\proiect\Debug\Obj\ -lC                    #
#                    D:\1307A\soc-p\proiect\Debug\List\ -lA                   #
#                    D:\1307A\soc-p\proiect\Debug\List\                       #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -On                             #
#    List file    =  D:\1307A\soc-p\proiect\Debug\List\main.lst               #
#    Object file  =  D:\1307A\soc-p\proiect\Debug\Obj\main.r90                #
#                                                                             #
#                                                                             #
###############################################################################

D:\1307A\soc-p\proiect\main.c
      1          #include <inavr.h> 
      2          #include <iom16.h>

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1
      3          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          unsigned char intrare_automat=0;
   \                     intrare_automat:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      5          unsigned short iesire_automat=0;
   \                     iesire_automat:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          unsigned char stare_automat=0;
   \                     stare_automat:
   \   00000000                      DS8 1
      7          
      8          extern void initializare(void);/* Prototipul functiei ASM */
      9          extern void c_intrerupere();
     10          extern void ext_intrerupere();
     11          extern void beculet(unsigned char luminozitate);
     12          

   \                                 In  segment CODE, align 2, keep-with-next
     13          void main(void)
   \                     main:
     14          {
     15            DDRD = 0x80;/* Initializeaza porturile de I/O*/
   \   00000000   E800               LDI     R16, 128
   \   00000002   BB01               OUT     0x11, R16
     16            DDRB = 0xFF;
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BB07               OUT     0x17, R16
     17            initializare();
   \   00000008   ........           CALL    initializare
     18            
     19            __enable_interrupt();
   \   0000000C   9478               SEI
     20            while(1)/* Bucla infinit?*/ 
     21            {	
     22              switch(stare_automat)
   \                     ??main_0:
   \   0000000E   9100....           LDS     R16, stare_automat
   \   00000012   5000               SUBI    R16, 0
   \   00000014   F019               BREQ    ??main_1
   \   00000016   950A               DEC     R16
   \   00000018   F079               BREQ    ??main_2
   \   0000001A   C01D               RJMP    ??main_3
     23              {
     24              case 0://starea 0, astept semnal de la senzor
     25                {
     26                  if(intrare_automat==1)//am primit semnalul de la senzor
   \                     ??main_1:
   \   0000001C   9100....           LDS     R16, intrare_automat
   \   00000020   3001               CPI     R16, 1
   \   00000022   F4C9               BRNE    ??main_3
     27          	{
     28          	  TCNT1=0;
   \   00000024   E000               LDI     R16, 0
   \   00000026   E010               LDI     R17, 0
   \   00000028   BD1D               OUT     0x2D, R17
   \   0000002A   BD0C               OUT     0x2C, R16
     29          	  stare_automat=1;
   \   0000002C   E001               LDI     R16, 1
   \   0000002E   9300....           STS     stare_automat, R16
     30          	  TCCR1B = (1<<CS11)|(1<<CS10)|(0<<ICES1);
   \   00000032   E003               LDI     R16, 3
   \   00000034   BD0E               OUT     0x2E, R16
     31          	}
     32          	break;
   \   00000036   C00F               RJMP    ??main_3
     33                }
     34                
     35                
     36              case 1://starea 1, sunt in semnal si astept sfarsitul lui
     37                {
     38                  if(intrare_automat==0)//s-a terminat semnalul de la senzor
   \                     ??main_2:
   \   00000038   9100....           LDS     R16, intrare_automat
   \   0000003C   2300               TST     R16
   \   0000003E   F459               BRNE    ??main_3
     39                  {
     40                    iesire_automat= TCNT1;//salvez valoarea din timer
   \   00000040   B50C               IN      R16, 0x2C
   \   00000042   B51D               IN      R17, 0x2D
   \   00000044   9300....           STS     iesire_automat, R16
   \   00000048   9310....           STS     (iesire_automat + 1), R17
     41                    stare_automat=0;
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   9300....           STS     stare_automat, R16
     42                    TCCR1B = (1<<CS11)|(1<<CS10)|(1<<ICES1);
   \   00000052   E403               LDI     R16, 67
   \   00000054   BD0E               OUT     0x2E, R16
     43                  }
     44                  
     45          	break;
     46          	
     47                }
     48              }
     49              
     50              beculet(iesire_automat);
   \                     ??main_3:
   \   00000056   9100....           LDS     R16, iesire_automat
   \   0000005A   9110....           LDS     R17, (iesire_automat + 1)
   \   0000005E   ........           CALL    beculet
   \   00000062   CFD5               RJMP    ??main_0
   \   00000064                      REQUIRE _A_DDRD
   \   00000064                      REQUIRE _A_DDRB
   \   00000064                      REQUIRE _A_TCNT1
   \   00000064                      REQUIRE _A_TCCR1B
     51            }
     52          }

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
       0      2  main
                   0 2 -> beculet
                   0 2 -> initializare


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_DDRB
       1  _A_DDRD
       1  _A_TCCR1B
       2  _A_TCNT1
       2  iesire_automat
       1  intrare_automat
     100  main
       1  stare_automat
       6  -- Other

 
   5 bytes in segment ABSOLUTE
 100 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment NEAR_Z
 
 100 bytes of CODE memory (+ 6 bytes shared)
   4 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: none
